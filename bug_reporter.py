# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'F:\Python_Projects\VC-GUI\ui\bug_reporter.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



from PyQt5 import QtCore, QtGui, QtWidgets
import firebase_admin
from firebase_admin import db

def show_error_window(error_message, title):
    import ctypes
    ctypes.windll.user32.MessageBoxW(0, error_message, title, 0)


def valid_email(email):
    import requests

    api_key = "97f278a6-df7c-407e-bc2d-01f05133a85e"
    response = requests.get(
        "https://isitarealemail.com/api/email/validate",
        params = {'email': email},
        headers = {'Authorization': "Bearer " + api_key })
    
    status = response.json()['status']
    if status == "valid":
       return True 
    elif status == "invalid":
      show_error_window("Email address does not exists!","Incorrect Email")
    else:
      show_error_window("Unknown Email address","Unknown email")
      
def initiate_submit(emails,title,problems):
    problem = problems.replace("\n","(newline)")
    email = emails.replace("@","(at)").replace(".","(dot)")
    if valid_email(emails):
        user = db.reference("emails").child(email)
        
        if user.get()!=None:
            total_reports = user.child("total_reports").get()
            user.update({
                "total_reports": total_reports+1,
                f"problem{total_reports+1}":{
                    "title": title,
                    "problem":problem
                }
            })
        else:
            user.set({
                "total_reports": 1,
                f"problem1":{
                    "title": title,
                    "problem":problem
                }
            })

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(492, 492)
        MainWindow.setFixedWidth(492)
        MainWindow.setFixedHeight(492)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 0, 471, 61))
        self.label.setObjectName("label")
        self.title_input = QtWidgets.QLineEdit(self.centralwidget)
        self.title_input.setGeometry(QtCore.QRect(110, 130, 241, 31))
        self.title_input.setObjectName("title_input")
        self.titlel_label = QtWidgets.QLabel(self.centralwidget)
        self.titlel_label.setGeometry(QtCore.QRect(40, 130, 81, 31))
        self.titlel_label.setObjectName("titlel_label")
        self.problem_input = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.problem_input.setGeometry(QtCore.QRect(110, 170, 241, 141))
        self.problem_input.setObjectName("problem_input")
        self.probleml_label = QtWidgets.QLabel(self.centralwidget)
        self.probleml_label.setGeometry(QtCore.QRect(20, 170, 91, 31))
        self.probleml_label.setObjectName("probleml_label")
        self.email_label = QtWidgets.QLabel(self.centralwidget)
        self.email_label.setGeometry(QtCore.QRect(40, 90, 81, 31))
        self.email_label.setObjectName("email_label")
        self.email_input = QtWidgets.QLineEdit(self.centralwidget)
        self.email_input.setGeometry(QtCore.QRect(110, 90, 241, 31))
        self.email_input.setObjectName("email_input")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 492, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        
        self.submit_btn = QtWidgets.QPushButton(self.centralwidget, clicked = lambda:initiate_submit(self.email_input.text(),self.title_input.text(),self.problem_input.toPlainText()))
        self.submit_btn.setGeometry(QtCore.QRect(110, 340, 241, 41))
        self.submit_btn.setStyleSheet("font: 12pt \"MS Shell Dlg 2\";")
        self.submit_btn.setObjectName("submit_btn")
        
        self.close_btn = QtWidgets.QPushButton(self.centralwidget, clicked = lambda:MainWindow.close())
        self.close_btn.setGeometry(QtCore.QRect(155, 390, 151, 41))
        self.close_btn.setObjectName("close_btn")
        
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Bug Reporter Window"))
        self.label.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:28pt;\">Bug Reporter Wizard</span></p></body></html>"))
        self.titlel_label.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:16pt;\">Title: </span></p></body></html>"))
        self.probleml_label.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:16pt;\">Problem: </span></p></body></html>"))
        self.submit_btn.setText(_translate("MainWindow", "Submit Report"))
        self.email_label.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:16pt;\">Email: </span></p></body></html>"))
        self.close_btn.setText(_translate("MainWindow", "Close"))

if __name__ == "__main__":
    import socket
    
    if socket.gethostbyname(socket.gethostname()) == "127.0.0.1":
        show_error_window("No internet connection!\nPlease connect to internet!","Internet Connection Error")
    else:    
        cred = firebase_admin.credentials.Certificate("./cred.json")
        firebase_admin.initialize_app(cred, {
        'databaseURL': "https://bugs-of-whatsapp-automater-default-rtdb.firebaseio.com/"
        })
        import sys
        app = QtWidgets.QApplication(sys.argv)
        MainWindow = QtWidgets.QMainWindow()
        ui = Ui_MainWindow()
        ui.setupUi(MainWindow)
        MainWindow.show()
        sys.exit(app.exec_())
